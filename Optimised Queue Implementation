#define SIZE 5
#include <stdio.h>
#include <stdbool.h>
bool x = false;
typedef struct Queue{
    int arr[SIZE];
    int head, tail;
} queue;

void Initialize(queue *Q){
    Q->head = 0;
    Q->tail = 0;
}

bool isEmpty(queue *Q){
    if(!x){
        if(Q->tail == Q->head){
        return true;
        }else{
            return false;
        }
    }
    return false;
}

bool isFull(queue *Q){
    if(x){
        if(Q->tail == Q->head){
        return true;
        }else {
            return false;
        }
    }
    return false;
}

void enqueue(queue *Q, int num){
    if(isFull(Q)){
        printf("the Queue is full, unable to enqueue\n");
        return;
    }
    Q->arr[Q->tail] = num;
    Q->tail++;
    if(Q->tail == SIZE){
        Q->tail = 0;
        x = true;
    }
}

int  dequeue(queue *Q){
    if(isEmpty(Q)){
        printf("the queue is empty, unable to dequeue\n");
        return -1;
    }
    int num = Q->arr[Q->head];
    Q->head++;
    if(Q->head == SIZE){
        Q->head = 0;
        x = false;
    }
    return num;
}

// int peek(queue *Q){
//     if(isEmpty(Q) == 1){
//         printf("the queue is empty, unable to peek\n");
//         return -1;
//     }
//     return Q->arr[Q->head];
// }

int start()
{
    int n;
    printf("Press\n"
    "(1) - for Enqueuing an element in the Queue\n"
    "(2) - for Dequeuing a element in the Queue\n"
    "(3) - for printing all elements in the Queue\n"
    "(0) - for Aborting the task\n");
    scanf("%d", &n);
    return n;
}

void print_Queue(queue* Q)
{
     if(isEmpty(Q) == 1){
        printf("the queue is empty, Nothing to print\n");
        return;
    }
    if(!x){
        for(int i = Q->head ; i < Q->tail-1  ; i++){
            printf("[ %d ] <- ", Q->arr[i]);
        }
        printf("[ %d ]", Q->arr[Q->tail-1]);
        printf("\n");
    }
    if(x){
        for(int i = Q->head ; i < SIZE ; i++){
            printf("[ %d ] <- ", Q->arr[i]);
        }
        for(int i = 0 ; i < Q->tail-1  ; i++){
            printf("[ %d ] <- ", Q->arr[i]);
        }
        if(Q->tail!= 0){
            printf("[ %d ]", Q->arr[Q->tail-1]);
        }
        printf("\n");
    }
}

int main(){
    int y = 0;
    queue q;
    Initialize(&q);
    printf("Starting the Queue Implementation of Size 5\n");
    while(1){
        int temp = 0;
        printf("------------------------------------------\n");
        int n = start();
        printf("------------------------------------------\n");
        if(n == 1){
            if(isFull(&q)){
                printf("The Queue is Full, unable to enqueue any value\n");
                continue;
            }
            printf("Enter the Value to be Enqueued: ");
            scanf("%d", &temp);
            enqueue(&q, temp);
            printf("the %d is Enqueued in the Queue\n", temp);
            
        }else if(n == 2){
            if(isEmpty(&q)){
                printf("The Queue is Empty, Unable to Dequeue the Value\n");
                continue;
            }
            y = dequeue(&q);
            printf("the %d is Dequeued in the Queue\n", y);
        }else if(n == 3){
            print_Queue(&q);
        }else if( n == 0){
            printf("Aborted the Task");
            break;
        }else {
            printf("Entered Wrong Input\n");
        }
    }
    return 0;
}
